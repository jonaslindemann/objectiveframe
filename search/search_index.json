{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the ObjectiveFrame web site ObjectiveFrame is a finite element beam analysis application developed at Structural Mechanics at Lund university. The application focused on how to make finite element analysis real-time explorable with direct feedback methods. On this page you will find information on installing, using and developing ObjectiveFrame.","title":"Home"},{"location":"#welcome-to-the-objectiveframe-web-site","text":"ObjectiveFrame is a finite element beam analysis application developed at Structural Mechanics at Lund university. The application focused on how to make finite element analysis real-time explorable with direct feedback methods. On this page you will find information on installing, using and developing ObjectiveFrame.","title":"Welcome to the ObjectiveFrame web site"},{"location":"about/","text":"About ObjectiveFrame The application was orginially developed at Structural Mechanics by Jonas Lindemann for his PhD thesis work. See: Objective Frame - An educational tool for understanding the behavior of structures Designing a new user interface for ObjectiveFrame Techniques for distributed access and visualisation computational mechanics ObjectiveFrame has also been used to develop distributed techniques for finite element applications using the CORBA framework. CORBA in distributed Finite element applications The application has also been used as an experimental application for user interface techniques within the field of finite element analysis. Daniel \u00c5kesson implemented 3d gesture controls using a leap-controller for interacting with finite element models. Using 3D gesture controls for interacting with mechanical models Pierre Olsson developed routines and user interfaces for computing section properties. Implementation details. The application is implemented as a C++ application using OpenGL for hardware accelerated rendering. ObjectiveFrame uses a scene graph model implemented using the C++ library Interactive Visualisation Framework - Ivf++ . The solver is implemented using the matrix-library Newmat11 . This version of the application has been given a large overhaul both with regards to C++ and the user interface. To increase the interactive aspect of the application the user interface has been reimplemented using the ImGui - library . This is an immediate mode user interface library that provides a state-less user interface rendered directly in the OpenGL window. Future development The ImGui implementation still builds on the FLTK library as it has been a large effort to unbind the close ties to this library. The next iterations will base the implementation directly on the GLFW library. User interface improvements. There is a still a lot of non-standard ways of interacting with the application, but these are also some things that will be worked out in upcoming versions. Interactions with the CALFEM for Python library. I would like to see the application as a pre-processor for generating CALFEM code that can be used by students in Structural Mechanics. An improved solver - Currently the newmat-based solver works OK, but lacks scalability as it is not very actively maintained. The eigen-library would be a candidate to replace newmat. Jonas Lindemann","title":"About"},{"location":"about/#about-objectiveframe","text":"The application was orginially developed at Structural Mechanics by Jonas Lindemann for his PhD thesis work. See: Objective Frame - An educational tool for understanding the behavior of structures Designing a new user interface for ObjectiveFrame Techniques for distributed access and visualisation computational mechanics ObjectiveFrame has also been used to develop distributed techniques for finite element applications using the CORBA framework. CORBA in distributed Finite element applications The application has also been used as an experimental application for user interface techniques within the field of finite element analysis. Daniel \u00c5kesson implemented 3d gesture controls using a leap-controller for interacting with finite element models. Using 3D gesture controls for interacting with mechanical models Pierre Olsson developed routines and user interfaces for computing section properties.","title":"About ObjectiveFrame"},{"location":"about/#implementation-details","text":"The application is implemented as a C++ application using OpenGL for hardware accelerated rendering. ObjectiveFrame uses a scene graph model implemented using the C++ library Interactive Visualisation Framework - Ivf++ . The solver is implemented using the matrix-library Newmat11 . This version of the application has been given a large overhaul both with regards to C++ and the user interface. To increase the interactive aspect of the application the user interface has been reimplemented using the ImGui - library . This is an immediate mode user interface library that provides a state-less user interface rendered directly in the OpenGL window.","title":"Implementation details."},{"location":"about/#future-development","text":"The ImGui implementation still builds on the FLTK library as it has been a large effort to unbind the close ties to this library. The next iterations will base the implementation directly on the GLFW library. User interface improvements. There is a still a lot of non-standard ways of interacting with the application, but these are also some things that will be worked out in upcoming versions. Interactions with the CALFEM for Python library. I would like to see the application as a pre-processor for generating CALFEM code that can be used by students in Structural Mechanics. An improved solver - Currently the newmat-based solver works OK, but lacks scalability as it is not very actively maintained. The eigen-library would be a candidate to replace newmat. Jonas Lindemann","title":"Future development"},{"location":"contact/","text":"Contact information For information on ObjectiveFrame please contact: Dr Jonas Lindemann","title":"Contact"},{"location":"contact/#contact-information","text":"For information on ObjectiveFrame please contact: Dr Jonas Lindemann","title":"Contact information"},{"location":"develop/","text":"Develop and extend ObjectiveFrame ObjectiveFrame is a C++ application built upon several libraries. To build the application required libraries have to be built. The main library used is Ivf++. This is an object-oriented 3D scene graph library encapsulating the OpenGL library. The second library required is FLTK, which is a multiplatform user interface library available for Windows, Linux and macOS. Future versions of ObjectiveFrame will use ImGui on top of GLFW instead. The following sections describe how to build the libraries and the application on Windows. Linux and macOS will come later. Building Ivf++ More to come... Building FLTK More to come... Building ObjectiveFrame More to come...","title":"Develop"},{"location":"develop/#develop-and-extend-objectiveframe","text":"ObjectiveFrame is a C++ application built upon several libraries. To build the application required libraries have to be built. The main library used is Ivf++. This is an object-oriented 3D scene graph library encapsulating the OpenGL library. The second library required is FLTK, which is a multiplatform user interface library available for Windows, Linux and macOS. Future versions of ObjectiveFrame will use ImGui on top of GLFW instead. The following sections describe how to build the libraries and the application on Windows. Linux and macOS will come later.","title":"Develop and extend ObjectiveFrame"},{"location":"develop/#building-ivf","text":"More to come...","title":"Building Ivf++"},{"location":"develop/#building-fltk","text":"More to come...","title":"Building FLTK"},{"location":"develop/#building-objectiveframe","text":"More to come...","title":"Building ObjectiveFrame"},{"location":"download/","text":"Downloading ObjectiveFrame Latest release: ObjectiveFrame-2.0.0-b1 All releases of ObjectiveFrame can be downloaded from Github here: https://github.com/jonaslindemann/objectiveframe/releases As this is a beta version we need to know what issues and enhancements to fix in upcoming releases. Please report any bugs or feature enhancements using the issue tracker in github here: https://github.com/jonaslindemann/objectiveframe/issues Known compatibility issues ObjectiveFrame works best with a modern NVIDIA based graphics card (GTX 10xx, 20xx, 30xx). Offscreen rendering for antialiasing doesn't work correctly under Intel-based graphics cards. ObjectiveFrame requires a graphics driver with an available compatibility profile available as the code uses the fixed function pipeline in OpenGL. As ObjectiveFrame uses a immediate mode user interface toolkit the Window will be redrawn continously, leading to a more responsive application, but also uses more resources.","title":"Download"},{"location":"download/#downloading-objectiveframe","text":"Latest release: ObjectiveFrame-2.0.0-b1 All releases of ObjectiveFrame can be downloaded from Github here: https://github.com/jonaslindemann/objectiveframe/releases As this is a beta version we need to know what issues and enhancements to fix in upcoming releases. Please report any bugs or feature enhancements using the issue tracker in github here: https://github.com/jonaslindemann/objectiveframe/issues","title":"Downloading ObjectiveFrame"},{"location":"download/#known-compatibility-issues","text":"ObjectiveFrame works best with a modern NVIDIA based graphics card (GTX 10xx, 20xx, 30xx). Offscreen rendering for antialiasing doesn't work correctly under Intel-based graphics cards. ObjectiveFrame requires a graphics driver with an available compatibility profile available as the code uses the fixed function pipeline in OpenGL. As ObjectiveFrame uses a immediate mode user interface toolkit the Window will be redrawn continously, leading to a more responsive application, but also uses more resources.","title":"Known compatibility issues"},{"location":"links/","text":"Links related to ObjectiveFrame Interactive Visualisation Framework - Ivf++ Objective Frame - An educational tool for understanding the behavior of structures Techniques for distributed access and visualisation computational mechanics CORBA in distributed Finite element applications Using 3D gesture controls for interacting with mechanical models FLTK library ImGui - library","title":"Links"},{"location":"links/#links-related-to-objectiveframe","text":"Interactive Visualisation Framework - Ivf++ Objective Frame - An educational tool for understanding the behavior of structures Techniques for distributed access and visualisation computational mechanics CORBA in distributed Finite element applications Using 3D gesture controls for interacting with mechanical models FLTK library ImGui - library","title":"Links related to ObjectiveFrame"},{"location":"use/","text":"Using ObjectiveFrame To give a short overview of what ObjectiveFrame can offer please view the following tutorial: Main window and view When you start the application the main workspace is displayed. The workspace is your workbench where you create your structures. By default the workspace is 20 x 20 units large. The size can be changed from the View/Settings... dialog. The view can be changed using the mouse. All view functions are handled by the right mouse button in combination with a modifier key. Holding down the right button and moving the mouse will rotate the view. Holding down the right button with the [Shift]-key will pan the view. Holding down the right button with the [Alt]-key will zoom in and out. On the screen is also a Hints windows displaying helpful hints for the different available tools. The top left toolbar contains the editing toolbar providing selection, move, copy, remove and property inspection functionality. The lower let toolbar contains functions for creating nodes, elements, loads, boundary conditions and section properties. These are described in the following sections. Creating nodes Nodes are created by selecting the node tool (first icon to the left in the lower toolbar). A cursor is shown on the workspace: At the top right of the window the current position of the cursor is shown: By default the cursor is locked in the XZ-plane, but can be moved vertically in the Y-direction by holding down the [Shift]-modifier. Selecting elements/nodes Selecting nodes and elements is done using the select tool (Top tool in the top left toolbar). Nodes that are selected are highlighted when the mouse is moved over them. Clicking on a node will add it to the selection. The current selection is highlighted in yellow. Clearing the current selection is done by clicking anywhere in the workspace. Moving nodes As ObjectiveFrame uses node based geometry the only objects that can be moved are nodes. Moving a node can be done in several ways. A single node can be moved by selecting it using the select tool and then clicking the inspect-tool. When a single node is selected the following dialog is shown: Clicking in the position boxes you can directly change the coordinate of the nodes. When multiple nodes are selected brings up the move/copy window instead. In the Offset input boxes an offset can be given, which can be used to move or copy nodes. When nodes have been moved or copy the selection is kept and can be used to repeat the operation. The shortcuts can be used to quickly set an offset for moving in a certain direction. In the following figure 4 nodes have been selected. Moving these nodes using the property window is shown in the following figure: Copying the nodes will result in the following result: Note The selection will move to the copied nodes, so that you can continue the copy operation multiple times. Creating elements Elements are created by using the element tool: Elements are created by selecting 2 nodes. There is no need to click on the tool multiple times when creating multiple elements. The following figure shows how this is accomplished: Creating boundary conditions / forces Creating boundary conditions and loads is a two-step process. First, a general definition of the load or boundary condition is created, then nodes are assigned with a specific condition. A node assigned with a load or boundary condition will have an icon visualizing the condition assigned to it. A boundary condition is created by displaying the boundary condition window by clicking on: This brings up the boundary condition window: ObjectiveFrame automatically creates default boundary conditions for common cases. New conditions can be created by clicking the Add button. To edit an existing condition press the Properties button this brings up the boundary condition editing dialog: In this dialog, the specifics of the boundary condition can be edited. A descriptive name and color can also be given to the condition. To apply a boundary condition to nodes/element, select the boundary condition in the list and click on the Assign -button. The assigned nodes will now have icons attached to them illustrating that they have a load or boundary condition assigned to them (See the following figures). Loads are created using the same procedure as boundary conditions. Defining section properties Section properties are defined in the section properties window. This window is shown by pressing the right-most button in the lower toolbar. This brings up the section properties window. All new elements will be assigned the default section property. To assign elements different section properties, create a new section property and assign it using the Assign button. Modifying a section property can be done by clicking on the Properties... button. This will bring up the section property dialog. In the first tab name, color and property values can be assigned. In the second tab Section values for several standardized sections can be computed. Rotation of element The element orientation can be changed by using the property inspector when a beam(s) are selected. Computing element forces ObjectiveFrame can compute deflections and element forces by selecting Calculation/Execute in the menu. A check will be made to see if boundary conditions and forces have been applied to the model. By default the deflections are computed and visualised. Other visualisation modes can be selected using the Result -menu. The following figures shows normal forces and moments visualised. Note Only node deflections are visualised currently. This could change in upcoming versions. Evaluating the structure using the feedback mode ObjectiveFrame has a special mode to evaluate how a force affects a structure in real-time. This mode is activated by selecting the feedback-button in the upper left toolbar. When selected a special feedback force can be placed on a now and moved by using the mouse. The structure will re-compute and results are updated in real-time. The following figures shows how the load is applied and updated: Interact with a different node by clicking on it. Section forces can be visualised by using the Result -menu. Exporting to CALFEM for Python Currently it is possible to export nodes and elements to CALFEM for Python by using the File/Save as CALFEM... menu. Only node coordinates and topology is exported currently. This method will be updated in upcoming versions.","title":"Use"},{"location":"use/#using-objectiveframe","text":"To give a short overview of what ObjectiveFrame can offer please view the following tutorial:","title":"Using ObjectiveFrame"},{"location":"use/#main-window-and-view","text":"When you start the application the main workspace is displayed. The workspace is your workbench where you create your structures. By default the workspace is 20 x 20 units large. The size can be changed from the View/Settings... dialog. The view can be changed using the mouse. All view functions are handled by the right mouse button in combination with a modifier key. Holding down the right button and moving the mouse will rotate the view. Holding down the right button with the [Shift]-key will pan the view. Holding down the right button with the [Alt]-key will zoom in and out. On the screen is also a Hints windows displaying helpful hints for the different available tools. The top left toolbar contains the editing toolbar providing selection, move, copy, remove and property inspection functionality. The lower let toolbar contains functions for creating nodes, elements, loads, boundary conditions and section properties. These are described in the following sections.","title":"Main window and view"},{"location":"use/#creating-nodes","text":"Nodes are created by selecting the node tool (first icon to the left in the lower toolbar). A cursor is shown on the workspace: At the top right of the window the current position of the cursor is shown: By default the cursor is locked in the XZ-plane, but can be moved vertically in the Y-direction by holding down the [Shift]-modifier.","title":"Creating nodes"},{"location":"use/#selecting-elementsnodes","text":"Selecting nodes and elements is done using the select tool (Top tool in the top left toolbar). Nodes that are selected are highlighted when the mouse is moved over them. Clicking on a node will add it to the selection. The current selection is highlighted in yellow. Clearing the current selection is done by clicking anywhere in the workspace.","title":"Selecting elements/nodes"},{"location":"use/#moving-nodes","text":"As ObjectiveFrame uses node based geometry the only objects that can be moved are nodes. Moving a node can be done in several ways. A single node can be moved by selecting it using the select tool and then clicking the inspect-tool. When a single node is selected the following dialog is shown: Clicking in the position boxes you can directly change the coordinate of the nodes. When multiple nodes are selected brings up the move/copy window instead. In the Offset input boxes an offset can be given, which can be used to move or copy nodes. When nodes have been moved or copy the selection is kept and can be used to repeat the operation. The shortcuts can be used to quickly set an offset for moving in a certain direction. In the following figure 4 nodes have been selected. Moving these nodes using the property window is shown in the following figure: Copying the nodes will result in the following result: Note The selection will move to the copied nodes, so that you can continue the copy operation multiple times.","title":"Moving nodes"},{"location":"use/#creating-elements","text":"Elements are created by using the element tool: Elements are created by selecting 2 nodes. There is no need to click on the tool multiple times when creating multiple elements. The following figure shows how this is accomplished:","title":"Creating elements"},{"location":"use/#creating-boundary-conditions-forces","text":"Creating boundary conditions and loads is a two-step process. First, a general definition of the load or boundary condition is created, then nodes are assigned with a specific condition. A node assigned with a load or boundary condition will have an icon visualizing the condition assigned to it. A boundary condition is created by displaying the boundary condition window by clicking on: This brings up the boundary condition window: ObjectiveFrame automatically creates default boundary conditions for common cases. New conditions can be created by clicking the Add button. To edit an existing condition press the Properties button this brings up the boundary condition editing dialog: In this dialog, the specifics of the boundary condition can be edited. A descriptive name and color can also be given to the condition. To apply a boundary condition to nodes/element, select the boundary condition in the list and click on the Assign -button. The assigned nodes will now have icons attached to them illustrating that they have a load or boundary condition assigned to them (See the following figures). Loads are created using the same procedure as boundary conditions.","title":"Creating boundary conditions / forces"},{"location":"use/#defining-section-properties","text":"Section properties are defined in the section properties window. This window is shown by pressing the right-most button in the lower toolbar. This brings up the section properties window. All new elements will be assigned the default section property. To assign elements different section properties, create a new section property and assign it using the Assign button. Modifying a section property can be done by clicking on the Properties... button. This will bring up the section property dialog. In the first tab name, color and property values can be assigned. In the second tab Section values for several standardized sections can be computed.","title":"Defining section properties"},{"location":"use/#rotation-of-element","text":"The element orientation can be changed by using the property inspector when a beam(s) are selected.","title":"Rotation of element"},{"location":"use/#computing-element-forces","text":"ObjectiveFrame can compute deflections and element forces by selecting Calculation/Execute in the menu. A check will be made to see if boundary conditions and forces have been applied to the model. By default the deflections are computed and visualised. Other visualisation modes can be selected using the Result -menu. The following figures shows normal forces and moments visualised. Note Only node deflections are visualised currently. This could change in upcoming versions.","title":"Computing element forces"},{"location":"use/#evaluating-the-structure-using-the-feedback-mode","text":"ObjectiveFrame has a special mode to evaluate how a force affects a structure in real-time. This mode is activated by selecting the feedback-button in the upper left toolbar. When selected a special feedback force can be placed on a now and moved by using the mouse. The structure will re-compute and results are updated in real-time. The following figures shows how the load is applied and updated: Interact with a different node by clicking on it. Section forces can be visualised by using the Result -menu.","title":"Evaluating the structure using the feedback mode"},{"location":"use/#exporting-to-calfem-for-python","text":"Currently it is possible to export nodes and elements to CALFEM for Python by using the File/Save as CALFEM... menu. Only node coordinates and topology is exported currently. This method will be updated in upcoming versions.","title":"Exporting to CALFEM for Python"}]}