#include <ofem/slffea_writer.h>

using namespace ofem;
using namespace std;

// ------------------------------------------------------------
SLFFEAWriter::SLFFEAWriter ()
{

}

// ------------------------------------------------------------
SLFFEAWriter::~SLFFEAWriter ()
{

}

// ------------------------------------------------------------
void SLFFEAWriter::saveToStream(std::ostream &out)
{
    long i, j;
    double E,G,A,Iy,Iz,Kv;
    double x, y, z;
    double ex, ey, ez;

    BeamModel* femModel = (BeamModel*)this->getFemModel();

    if (femModel==NULL)
        return;

    ElementSet* elementSet = femModel->getElementSet();
    NodeSet* nodeSet = femModel->getNodeSet();
    MaterialSet* materialSet = femModel->getMaterialSet();
    NodeBCSet* bcSet = femModel->getNodeBCSet();
    NodeLoadSet* nodeLoadSet = femModel->getNodeLoadSet();
    ElementLoadSet* elementLoadSet = femModel->getElementLoadSet();

    nodeSet->enumerateNodes();
    materialSet->enumerateMaterials();
    elementSet->enumerateElements();
    nodeLoadSet->enumerateLoads();
    elementLoadSet->enumerateLoads();
    bcSet->enumerateBCs();

    //
    // Write problem information
    //

    out << "# Generated by ObjectiveFrame 1.0" << endl;
    out << elementSet->getSize() << " ";
    out << nodeSet->getSize() << " ";
    out << materialSet->getSize() << endl;

    //
    // Write materials
    //

    out << "# Materials" << endl;

    for (i=0; i<materialSet->getSize(); i++)
    {
        BeamMaterial* material = (BeamMaterial*) materialSet->getMaterial(i);
        material->getProperties(E,G,A,Iy,Iz,Kv);
        out << i << " ";
        out << E << " ";
        out << (E/2.0/G - 1.0) << " ";
        out << A << " ";
        out << Iy << " ";
        out << Iz << endl;
    }

    //
    // Write elements
    //

    out << "# Elements" << endl;

    for (i=0; i<elementSet->getSize(); i++)
    {
        Beam* element = (Beam*) elementSet->getElement(i);
        out << i << " ";
        out << element->getNode(0)->getNumber()-1 << " ";
        out << element->getNode(1)->getNumber()-1 << " ";
        out << element->getMaterial()->getNumber()-1 << endl;
    }

    //
    // Write node coordinates
    //

    out << "# Nodes" << endl;

    for (i=0; i<nodeSet->getSize(); i++)
    {
        Node* node = nodeSet->getNode(i);
        out << i << " ";
        node->getCoord(x, y, z);
        out << x << " " << y << " " << z << endl;
    }

    //
    // Write specified local z axis
    //

    out << "# Local z-axis" << endl;

    for (i=0; i<elementSet->getSize(); i++)
    {
        Beam* element = (Beam*) elementSet->getElement(i);
        out << i << " ";
        element->getOrientationZ(ex, ey, ez);
        out << ex << " ";
        out << ey << " ";
        out << ez << endl;
    }
    out << -10 << endl;

    //
    // Write prescribed displacements X-direction
    //

    out << "# Prescribed displacement x" << endl;

    for (i=0; i<bcSet->getSize(); i++)
    {
        NodeBC* nodeBC = (NodeBC*)bcSet->getBC(i);
        if (nodeBC->isPrescribed(1))
        {
            for (j=0; j<nodeBC->getNodeSize(); j++)
            {
                Node* node = nodeBC->getNode(j);
                out << node->getNumber()-1 << " ";
                out << nodeBC->getPrescribedValue(1) << endl;
            }
        }
    }
    out << -10 << endl;

    //
    // Write prescribed displacements Y-direction
    //

    out << "# Prescribed displacement y" << endl;

    for (i=0; i<bcSet->getSize(); i++)
    {
        NodeBC* nodeBC = (NodeBC*)bcSet->getBC(i);
        if (nodeBC->isPrescribed(2))
        {
            for (j=0; j<nodeBC->getNodeSize(); j++)
            {
                Node* node = nodeBC->getNode(j);
                out << node->getNumber()-1 << " ";
                out << nodeBC->getPrescribedValue(2) << endl;
            }
        }
    }
    out << -10 << endl;

    //
    // Write prescribed displacements Z-direction
    //

    out << "# Prescribed displacement z" << endl;

    for (i=0; i<bcSet->getSize(); i++)
    {
        NodeBC* nodeBC = (NodeBC*)bcSet->getBC(i);
        if (nodeBC->isPrescribed(3))
        {
            for (j=0; j<nodeBC->getNodeSize(); j++)
            {
                Node* node = nodeBC->getNode(j);
                out << node->getNumber()-1 << " ";
                out << nodeBC->getPrescribedValue(3) << endl;
            }
        }
    }
    out << -10 << endl;

    //
    // Write prescribed rotation x-axis
    //

    out << "# Prescribed rotation x" << endl;

    for (i=0; i<bcSet->getSize(); i++)
    {
        NodeBC* nodeBC = (NodeBC*)bcSet->getBC(i);
        if (nodeBC->isPrescribed(4))
        {
            for (j=0; j<nodeBC->getNodeSize(); j++)
            {
                Node* node = nodeBC->getNode(j);
                out << node->getNumber()-1 << " ";
                out << nodeBC->getPrescribedValue(4) << endl;
            }
        }
    }
    out << -10 << endl;

    //
    // Write prescribed rotation y-axis
    //

    out << "# Prescribed rotation y" << endl;

    for (i=0; i<bcSet->getSize(); i++)
    {
        NodeBC* nodeBC = (NodeBC*)bcSet->getBC(i);
        if (nodeBC->isPrescribed(5))
        {
            for (j=0; j<nodeBC->getNodeSize(); j++)
            {
                Node* node = nodeBC->getNode(j);
                out << node->getNumber()-1 << " ";
                out << nodeBC->getPrescribedValue(5) << endl;
            }
        }
    }
    out << -10 << endl;

    //
    // Write prescribed rotation z-axis
    //

    out << "# Prescribed rotation z" << endl;

    for (i=0; i<bcSet->getSize(); i++)
    {
        NodeBC* nodeBC = (NodeBC*)bcSet->getBC(i);
        if (nodeBC->isPrescribed(6))
        {
            for (j=0; j<nodeBC->getNodeSize(); j++)
            {
                Node* node = nodeBC->getNode(j);
                out << node->getNumber()-1 << " ";
                out << nodeBC->getPrescribedValue(6) << endl;
            }
        }
    }
    out << -10 << endl;

    //
    // Write nodal loads
    //

    out << "# Nodal loads" << endl;

    for (i=0; i<nodeLoadSet->getSize(); i++)
    {
        NodeLoad* nodeLoad = (NodeLoad*)nodeLoadSet->getLoad(i);
        for (j=0; j<(long)nodeLoad->getNodeSize(); j++)
        {
            Node* node = nodeLoad->getNode(j);
            out << node->getNumber()-1 << " ";
            nodeLoad->getDirection(ex, ey, ez);
            out << nodeLoad->getValue()*ex << " ";
            out << nodeLoad->getValue()*ey << " ";
            out << nodeLoad->getValue()*ez << " ";
            out << 0.0 << " " << 0.0 << " " << 0.0 << endl;
        }
    }
    out << -10 << endl;

    //
    // Distributed loads
    //

    out << "# Distributed loads" << endl;

    for (i=0; i<elementLoadSet->getSize(); i++)
    {
        BeamLoad* beamLoad = (BeamLoad*) elementLoadSet->getLoad(i);
        for (j=0; j<beamLoad->getElementsSize(); j++)
        {
            Beam* beam = (Beam*) beamLoad->getElement(j);
            out << beam->getNumber()-1 << " ";
            beamLoad->getLocalDirection(ex, ey, ez);
            out << -beamLoad->getValue()*ey << " ";
            out << -beamLoad->getValue()*ez << endl;
        }
    }
    out << -10 << endl;

    out << "# ---" << endl;
    out << -10 << endl;

}

void SLFFEAWriter::setFileName(const char *fileName)
{
    m_fileName = fileName;
}

void SLFFEAWriter::save()
{
    if (m_fileName!="")
    {
        fstream inputFile;
        inputFile.open(m_fileName.c_str(), ios::out);
        this->saveToStream(inputFile);
        inputFile.close();
    }
}
