// generated by Fast Light User Interface Designer (fluid) version 1.0400

#include "BeamPropDlg.h"
#include "FemWidget.h"

void BeamPropDlg::cb_btnClose_i(Fl_Button*, void*) {
  wndBeamProp->hide();
}
void BeamPropDlg::cb_btnClose(Fl_Button* o, void* v) {
  ((BeamPropDlg*)(o->parent()->user_data()))->cb_btnClose_i(o,v);
}

void BeamPropDlg::cb_sldBeamRotation_i(Fl_Value_Slider*, void*) {
  FemWidget* femWidget = (FemWidget*)m_femWidget;
femWidget->setRotationSelected(sldBeamRotation->value());
}
void BeamPropDlg::cb_sldBeamRotation(Fl_Value_Slider* o, void* v) {
  ((BeamPropDlg*)(o->parent()->parent()->user_data()))->cb_sldBeamRotation_i(o,v);
}

void BeamPropDlg::cb_btnShowMaterialDlg_i(Fl_Button*, void*) {
}
void BeamPropDlg::cb_btnShowMaterialDlg(Fl_Button* o, void* v) {
  ((BeamPropDlg*)(o->parent()->parent()->user_data()))->cb_btnShowMaterialDlg_i(o,v);
}

BeamPropDlg::BeamPropDlg() {
  { wndBeamProp = new Fl_Double_Window(221, 366, "Beam information");
    wndBeamProp->color(FL_FOREGROUND_COLOR);
    wndBeamProp->user_data((void*)(this));
    { btnClose = new Fl_Button(151, 334, 61, 25, "Close");
      btnClose->box(FL_FLAT_BOX);
      btnClose->down_box(FL_DOWN_BOX);
      btnClose->color((Fl_Color)41);
      btnClose->labelsize(12);
      btnClose->callback((Fl_Callback*)cb_btnClose);
    } // Fl_Button* btnClose
    { grpBeamRotation = new Fl_Group(9, 8, 204, 93);
      grpBeamRotation->box(FL_FLAT_BOX);
      grpBeamRotation->color((Fl_Color)36);
      { sldBeamRotation = new Fl_Value_Slider(17, 28, 188, 24, "Beam rotation");
        sldBeamRotation->type(1);
        sldBeamRotation->box(FL_FLAT_BOX);
        sldBeamRotation->color((Fl_Color)46);
        sldBeamRotation->labelsize(12);
        sldBeamRotation->labelcolor(FL_BACKGROUND2_COLOR);
        sldBeamRotation->maximum(360);
        sldBeamRotation->step(5);
        sldBeamRotation->textcolor(FL_BACKGROUND2_COLOR);
        sldBeamRotation->callback((Fl_Callback*)cb_sldBeamRotation);
        sldBeamRotation->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Value_Slider* sldBeamRotation
      { btnShowMaterialDlg = new Fl_Button(17, 65, 188, 27, "Edit assigned beam property");
        btnShowMaterialDlg->box(FL_FLAT_BOX);
        btnShowMaterialDlg->down_box(FL_DOWN_BOX);
        btnShowMaterialDlg->labelsize(12);
        btnShowMaterialDlg->callback((Fl_Callback*)cb_btnShowMaterialDlg);
      } // Fl_Button* btnShowMaterialDlg
      { boxDivider = new Fl_Box(17, 58, 188, 2);
        boxDivider->box(FL_FLAT_BOX);
        boxDivider->color((Fl_Color)46);
      } // Fl_Box* boxDivider
      grpBeamRotation->end();
    } // Fl_Group* grpBeamRotation
    { tabResults = new Fl_Tabs(9, 108, 204, 221);
      tabResults->box(FL_FLAT_BOX);
      tabResults->color(FL_DARK3);
      tabResults->selection_color(FL_DARK3);
      { grpSectionForces = new Fl_Group(12, 131, 199, 196, "Section forces");
        grpSectionForces->box(FL_FLAT_BOX);
        grpSectionForces->color((Fl_Color)36);
        grpSectionForces->selection_color((Fl_Color)36);
        grpSectionForces->labelsize(12);
        { lbSectionForces = new Fl_Browser(14, 135, 194, 189);
          lbSectionForces->box(FL_THIN_DOWN_BOX);
          lbSectionForces->color((Fl_Color)34);
          lbSectionForces->labelsize(12);
          lbSectionForces->textfont(4);
          lbSectionForces->textsize(10);
        } // Fl_Browser* lbSectionForces
        grpSectionForces->end();
      } // Fl_Group* grpSectionForces
      { grpDisplacements = new Fl_Group(12, 132, 200, 194, "Displacements");
        grpDisplacements->box(FL_FLAT_BOX);
        grpDisplacements->color((Fl_Color)36);
        grpDisplacements->selection_color((Fl_Color)36);
        grpDisplacements->labelsize(12);
        grpDisplacements->hide();
        { lbDisplacements = new Fl_Browser(14, 135, 194, 189);
          lbDisplacements->box(FL_THIN_DOWN_BOX);
          lbDisplacements->color((Fl_Color)34);
          lbDisplacements->textfont(4);
          lbDisplacements->textsize(10);
        } // Fl_Browser* lbDisplacements
        grpDisplacements->end();
      } // Fl_Group* grpDisplacements
      tabResults->end();
    } // Fl_Tabs* tabResults
    wndBeamProp->set_non_modal();
    wndBeamProp->end();
  } // Fl_Double_Window* wndBeamProp
  m_beam = NULL;
  m_femWidget = NULL;
}

void BeamPropDlg::show() {
  this->setBeam(m_beam);
  wndBeamProp->show();
}

void BeamPropDlg::setBeam(VisFemBeam* beam) {
  m_beam = beam;
  if (m_beam==NULL)
  {
  	btnShowMaterialDlg->deactivate();
  	sldBeamRotation->deactivate();
  	lbSectionForces->clear();
  	lbDisplacements->clear();
  }
  else
  {
  	btnShowMaterialDlg->activate();
  	sldBeamRotation->activate();
  	sldBeamRotation->value(m_beam->getBeam()->getBeamRotation());
  	this->fillListboxes();
  }
}

VisFemBeam* BeamPropDlg::getBeam() {
  return m_beam;
}

void BeamPropDlg::hide() {
  wndBeamProp->hide();
}

void BeamPropDlg::setFemWidget(void* femWidget) {
  m_femWidget = femWidget;
}

void BeamPropDlg::fillListboxes() {
  if (m_beam!=NULL)
  {
  	if (m_beam->getBeam()->getValueSize()>0)
  	{
  		int k,j;
  		int pos = 0;
  		double values[6];
  		char buffer[200];
  		int n = m_beam->getBeam()->getEvaluationPoints();
  		lbSectionForces->clear();
  		lbSectionForces->add("      N          Vy         Vz         T          My         Mz");
  		lbDisplacements->clear();
  		lbDisplacements->add("      u          v          w          fi");
  		for (k=1; k<=n; k++)
  		{
  			for (j=1; j<=6; j++)
  			{
  				values[j-1] = m_beam->getBeam()->getValue(pos++);
  			}
  			sprintf(
  				buffer, 
  				"%10.3f %10.3f %10.3f %10.3f %10.3f %10.3f", 
  				values[0],values[1],values[2],values[3],values[4],values[5]);
  			lbSectionForces->add(buffer);  
  		}

  		for (k=1; k<=n; k++)
  		{
  			for (j=1; j<=4; j++)
  			{
  				values[j-1] = m_beam->getBeam()->getValue(pos++);
  			}
  			sprintf(
  				buffer, 
  				"%10.3f %10.3f %10.3f %10.3f", 
  				values[0],values[1],values[2],values[3]);
  			lbDisplacements->add(buffer);  
  		}
  	}
  }
}
