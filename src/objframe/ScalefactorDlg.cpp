// generated by Fast Light User Interface Designer (fluid) version 1.0100

#include "ScalefactorDlg.h"
#include "IvfFemWidget.h"

inline void CScalefactorDlg::cb_btnClose_i(Fl_Button*, void*) {
  wndWorkspace->hide();
}
void CScalefactorDlg::cb_btnClose(Fl_Button* o, void* v) {
  ((CScalefactorDlg*)(o->parent()->user_data()))->cb_btnClose_i(o,v);
}

inline void CScalefactorDlg::cb_sldScalefactor_i(Fl_Value_Slider*, void*) {
  if (m_femWidget!=NULL)
{
	CIvfFemWidget* femWidget = (CIvfFemWidget*)m_femWidget;
	femWidget->setScalefactor(sldScalefactor->value());
};
}
void CScalefactorDlg::cb_sldScalefactor(Fl_Value_Slider* o, void* v) {
  ((CScalefactorDlg*)(o->parent()->parent()->user_data()))->cb_sldScalefactor_i(o,v);
}

CScalefactorDlg::CScalefactorDlg() {
  Fl_Window* w;
  { Fl_Window* o = wndWorkspace = new Fl_Window(310, 100, "Workspace");
    w = o;
    o->user_data((void*)(this));
    { Fl_Button* o = btnClose = new Fl_Button(236, 6, 67, 25, "Close");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_btnClose);
    }
    { Fl_Group* o = grpWorkspace = new Fl_Group(6, 5, 223, 89);
      o->box(FL_PLASTIC_DOWN_FRAME);
      { Fl_Value_Slider* o = sldScalefactor = new Fl_Value_Slider(18, 41, 201, 20, "Scalefactor");
        o->type(5);
        o->box(FL_PLASTIC_DOWN_BOX);
        o->minimum(1);
        o->maximum(1e+006);
        o->step(0);
        o->value(1);
        o->callback((Fl_Callback*)cb_sldScalefactor);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      o->end();
    }
    o->set_non_modal();
    o->end();
  }
  m_femWidget = NULL;
}

CScalefactorDlg::~CScalefactorDlg() {
  delete wndWorkspace;
}

void CScalefactorDlg::show() {
  if (m_femWidget!=NULL)
{
	CIvfFemWidget* femWidget = (CIvfFemWidget*) m_femWidget;
	sldScalefactor->value(femWidget->getScalefactor());
}
wndWorkspace->show();
}

void CScalefactorDlg::setFemWidget(void* femWidget) {
  m_femWidget = femWidget;
}

void CScalefactorDlg::setScaling(double maxValue) {
  m_maxValue = maxValue;
sldScalefactor->maximum(maxValue*10);
sldScalefactor->minimum(maxValue*0.1);
sldScalefactor->step((maxValue*10-maxValue*0.1)/100.0);
}
