// generated by Fast Light User Interface Designer (fluid) version 1.0100

#include "StructureDlg.h"
#include <iostream.h>

inline void CStructureDlg::cb_btnOk_i(Fl_Button*, void*) {
  m_modalResult = MR_OK;
wndWorkspace->hide();
}
void CStructureDlg::cb_btnOk(Fl_Button* o, void* v) {
  ((CStructureDlg*)(o->parent()->user_data()))->cb_btnOk_i(o,v);
}

inline void CStructureDlg::cb_btnCancel_i(Fl_Button*, void*) {
  m_modalResult = MR_CANCEL;
wndWorkspace->hide();
}
void CStructureDlg::cb_btnCancel(Fl_Button* o, void* v) {
  ((CStructureDlg*)(o->parent()->user_data()))->cb_btnCancel_i(o,v);
}

CStructureDlg::CStructureDlg() {
  Fl_Window* w;
  { Fl_Window* o = wndWorkspace = new Fl_Window(312, 231, "Create structure");
    w = o;
    o->user_data((void*)(this));
    { Fl_Button* o = btnOk = new Fl_Button(239, 5, 67, 25, "OK");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_btnOk);
    }
    { Fl_Button* o = btnCancel = new Fl_Button(239, 36, 67, 25, "Cancel");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_btnCancel);
    }
    { Fl_Group* o = grpWorkspace = new Fl_Group(4, 5, 228, 222);
      o->box(FL_PLASTIC_DOWN_FRAME);
      { Fl_Value_Slider* o = sldRows = new Fl_Value_Slider(16, 28, 201, 20, "Number of rows ");
        o->type(1);
        o->box(FL_PLASTIC_DOWN_BOX);
        o->labelsize(12);
        o->minimum(2);
        o->maximum(30);
        o->step(1);
        o->value(4);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Value_Slider* o = sldColumns = new Fl_Value_Slider(16, 66, 201, 20, "Number of columns");
        o->type(1);
        o->box(FL_PLASTIC_DOWN_BOX);
        o->labelsize(12);
        o->minimum(2);
        o->maximum(30);
        o->step(1);
        o->value(4);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Value_Slider* o = sldStacks = new Fl_Value_Slider(16, 104, 201, 20, "Number of stacks");
        o->type(1);
        o->box(FL_PLASTIC_DOWN_BOX);
        o->labelsize(12);
        o->minimum(2);
        o->maximum(30);
        o->step(1);
        o->value(4);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Value_Input* o = edtZspacing = new Fl_Value_Input(112, 139, 105, 22, "Z spacing (units)");
        o->box(FL_PLASTIC_DOWN_BOX);
        o->labelsize(12);
        o->minimum(0.1);
        o->maximum(1e+300);
        o->value(2);
      }
      { Fl_Value_Input* o = edtXspacing = new Fl_Value_Input(112, 166, 105, 22, "X spacing (units)");
        o->box(FL_PLASTIC_DOWN_BOX);
        o->labelsize(12);
        o->minimum(0.1);
        o->maximum(1e+300);
        o->value(2);
      }
      { Fl_Value_Input* o = edtYspacing = new Fl_Value_Input(112, 193, 105, 22, "Y spacing (units)");
        o->box(FL_PLASTIC_DOWN_BOX);
        o->labelsize(12);
        o->minimum(0.1);
        o->maximum(1e+300);
        o->value(2);
      }
      o->end();
    }
    o->set_modal();
    o->end();
  }
}

void CStructureDlg::show() {
  wndWorkspace->show();
while (wndWorkspace->visible()) Fl::wait();
}

int CStructureDlg::getModalResult() {
  return m_modalResult;
}

CStructureDlg::~CStructureDlg() {
  delete wndWorkspace;
}

void CStructureDlg::getSize(int &rows, int &cols, int &stacks) {
  m_size[0] = sldRows->value();
m_size[1] = sldColumns->value();
m_size[2] = sldStacks->value();
rows = m_size[0];
cols = m_size[1];
stacks = m_size[2];
}

void CStructureDlg::getSpacing(double &xSpacing, double &ySpacing, double &zSpacing) {
  m_spacing[0] = edtXspacing->value();
m_spacing[1] = edtYspacing->value();
m_spacing[2] = edtZspacing->value();
xSpacing = m_spacing[0];
ySpacing = m_spacing[1];
zSpacing = m_spacing[2];
}
